#!/usr/bin/env python3
import os
import aiohttp
import discord
from discord.ext import commands
from datetime import datetime
import random
import string
import re
from flask import Flask
from threading import Thread

# =====================
# ‚öôÔ∏è CONFIG
# =====================
BOT_TOKEN = os.getenv("BOT_TOKEN")
BOT_PREFIX = "!"
ROLE_ID_ALLOWED = 1420109032319881266

CREATE_URL = "https://keyauth.x10.mx/api/apiv1.php"
RESET_URL_TEMPLATE = "https://keyauth.x10.mx/api/reset.php?key={key}"
MAX_KEYS_PER_COMMAND = 50

# =====================
# üéû GIF ICONS
# =====================
ICON_KEY = "https://i.imgur.com/poj70Ye.gif"
ICON_RESET = "https://i.imgur.com/PZgDnbB.gif"
ICON_VIP = "https://i.imgur.com/bIvsLKH.gif"
ICON_LOGO = "https://i.imgur.com/ZOajx1X.gif"

# =====================
# üåê KEEP ALIVE SERVER (Replit 24/7)
# =====================
app = Flask('')

@app.route('/')
def home():
    return "‚úÖ SAITAMA BOT ƒëang ho·∫°t ƒë·ªông 24/7!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# =====================
# ü§ñ BOT SETUP
# =====================
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix=BOT_PREFIX, intents=intents)

# =====================
# üß© UTILS
# =====================
def has_role_allowed():
    async def predicate(ctx):
        return any(role.id == ROLE_ID_ALLOWED for role in ctx.author.roles)
    return commands.check(predicate)


def generate_saitama_key(custom: str = None):
    """T·∫°o key SAITAMA-XXXXX ho·∫∑c custom."""
    if custom:
        return f"SAITAMA-{custom.upper()}"
    return f"SAITAMA-{''.join(random.choices(string.ascii_uppercase + string.digits, k=5))}"


async def call_create_key(session: aiohttp.ClientSession, key: str, expiry: str):
    """G·ªçi API PHP t·∫°o key."""
    expiry = expiry.lower()

    if expiry == "permanent":
        params = {
            "action": "create",
            "plan": "permanent",
            "custom_key": key
        }
    else:
        match = re.match(r"^\+?(\d+)d$", expiry)
        duration_days = int(match.group(1)) if match else 1
        params = {
            "action": "create",
            "plan": f"{duration_days}d",
            "duration_days": duration_days,
            "custom_key": key
        }

    try:
        async with session.get(CREATE_URL, params=params, timeout=20) as resp:
            return resp.status, await resp.json(content_type=None)
    except Exception as e:
        return -1, {"status": "error", "message": str(e)}


async def call_reset_key(session: aiohttp.ClientSession, key: str):
    """G·ªçi API reset key."""
    url = RESET_URL_TEMPLATE.format(key=aiohttp.helpers.quote(key, safe=''))
    try:
        async with session.get(url, timeout=20) as resp:
            return resp.status, await resp.text()
    except Exception as e:
        return -1, str(e)


# =====================
# üöÄ COMMANDS
# =====================
@bot.event
async def on_ready():
    print(f"‚úÖ Logged in as {bot.user} ({bot.user.id})")
    await bot.change_presence(activity=discord.Game(name=f"{BOT_PREFIX}helpkeys ƒë·ªÉ xem h∆∞·ªõng d·∫´n"))


# ----- CREATEKEY -----
@bot.command(name="createkey")
@has_role_allowed()
async def createkey(ctx, quantity: int = 1, expiry: str = None, custom: str = None):
    """T·∫°o key: !createkey <s·ªë l∆∞·ª£ng> [th·ªùi h·∫°n] [custom_key]"""
    async with ctx.typing():
        if quantity < 1 or quantity > MAX_KEYS_PER_COMMAND:
            await ctx.reply(f"‚ùå S·ªë l∆∞·ª£ng ph·∫£i t·ª´ 1 t·ªõi {MAX_KEYS_PER_COMMAND}.")
            return

        expiry_norm = expiry.lower() if expiry else "+1d"

        # N·∫øu c√≥ custom ‚Üí ch·ªâ t·∫°o 1 key custom
        if custom:
            keys_to_create = [generate_saitama_key(custom)]
        else:
            keys_to_create = [generate_saitama_key() for _ in range(quantity)]

        results = []
        async with aiohttp.ClientSession() as session:
            for k in keys_to_create:
                status, data = await call_create_key(session, k, expiry_norm)
                results.append((k, data))

        success_keys = [d.get('license_key', k) for k, d in results if d.get("status") == "success"]
        failed_keys = [k for k, d in results if d.get("status") != "success"]

        embed = discord.Embed(
            title="‚ú® T·∫†O KEY TH√ÄNH C√îNG ‚ú®" if success_keys else "‚ö†Ô∏è T·∫†O KEY TH·∫§T B·∫†I ‚ö†Ô∏è",
            description=f"üë§ **Ng∆∞·ªùi y√™u c·∫ßu:** {ctx.author.mention}\nüïì **Th·ªùi h·∫°n:** `{expiry_norm}`\nüî¢ **S·ªë l∆∞·ª£ng:** `{len(keys_to_create)}`",
            color=0x2ecc71 if success_keys else 0xe74c3c,
            timestamp=datetime.utcnow()
        )

        if success_keys:
            embed.add_field(name="‚úÖ Key(s) th√†nh c√¥ng", value="\n".join(f"`{k}`" for k in success_keys), inline=False)
        if failed_keys:
            embed.add_field(name="‚ùå Key(s) th·∫•t b·∫°i", value="\n".join(f"`{k}`" for k in failed_keys), inline=False)

        embed.set_thumbnail(url=ICON_VIP if expiry_norm == "permanent" else ICON_KEY)
        embed.set_footer(text="H·ªá th·ªëng KeyAuth ‚Ä¢ SAITAMA VN", icon_url=ICON_LOGO)
        await ctx.send(embed=embed)


# ----- RESETKEY -----
@bot.command(name="resetkey")
@has_role_allowed()
async def resetkey(ctx, *keys: str):
    if not keys:
        await ctx.reply("‚ùå Vui l√≤ng nh·∫≠p √≠t nh·∫•t 1 key ƒë·ªÉ reset.")
        return

    async with ctx.typing():
        results = []
        async with aiohttp.ClientSession() as session:
            for k in keys:
                status, text = await call_reset_key(session, k)
                if "not found" in text.lower() or status != 200:
                    results.append((k, "fail"))
                else:
                    results.append((k, "success"))

        success_keys = [k for k, s in results if s == "success"]
        failed_keys = [k for k, s in results if s == "fail"]

        embed = discord.Embed(
            title="‚ôªÔ∏è K·∫æT QU·∫¢ RESET KEY ‚ôªÔ∏è",
            description=f"üë§ **Y√™u c·∫ßu b·ªüi:** {ctx.author.mention}",
            color=0x3498db,
            timestamp=datetime.utcnow()
        )

        if success_keys:
            embed.add_field(name="‚úÖ Th√†nh c√¥ng", value="\n".join(f"`{k}`" for k in success_keys), inline=False)
        if failed_keys:
            embed.add_field(name="‚ö†Ô∏è Th·∫•t b·∫°i", value="\n".join(f"`{k}`" for k in failed_keys), inline=False)

        embed.set_thumbnail(url=ICON_RESET)
        embed.set_footer(text="H·ªá th·ªëng KeyAuth ‚Ä¢ SAITAMA VN", icon_url=ICON_LOGO)
        await ctx.send(embed=embed)


# ----- HELPKEYS -----
@bot.command(name="helpkeys")
async def helpkeys(ctx):
    embed = discord.Embed(
        title="üìò H∆Ø·ªöNG D·∫™N H·ªÜ TH·ªêNG KEYAUTH",
        description="H·ªá th·ªëng qu·∫£n l√Ω key t·ª± ƒë·ªông d√†nh cho **SAITAMA VN Team** üöÄ",
        color=0xf1c40f,
        timestamp=datetime.utcnow()
    )

    embed.add_field(
        name="üîë !createkey `<s·ªë l∆∞·ª£ng>` `[th·ªùi h·∫°n]` `[t√πy ch·ªçn]`",
        value=(
            "‚ñ´Ô∏è `!createkey 3 +7d` ‚Üí t·∫°o 3 key random, h·∫°n 7 ng√†y\n"
            "‚ñ´Ô∏è `!createkey 1 +7d VIPUSER` ‚Üí t·∫°o 1 key t√™n `SAITAMA-VIPUSER`, h·∫°n 7 ng√†y\n"
            "‚ñ´Ô∏è `!createkey 1 permanent` ‚Üí t·∫°o 1 key vƒ©nh vi·ªÖn\n"
            "‚ñ´Ô∏è `!createkey 1 permanent VIPUSER` ‚Üí t·∫°o key `SAITAMA-VIPUSER` vƒ©nh vi·ªÖn"
        ),
        inline=False
    )

    embed.add_field(
        name="‚ôªÔ∏è !resetkey `<key1>` `[key2] ...`",
        value="Reset m·ªôt ho·∫∑c nhi·ªÅu key c√πng l√∫c.\nV√≠ d·ª•: `!resetkey SAITAMA-ABC SAITAMA-XYZ`",
        inline=False
    )

    embed.set_footer(text="H·ªá th·ªëng KeyAuth ‚Ä¢ SAITAMA VN", icon_url=ICON_LOGO)
    await ctx.send(embed=embed)


# =====================
# üèÅ RUN BOT
# =====================
if __name__ == "__main__":
    keep_alive()  # ‚úÖ Gi·ªØ bot online 24/7 tr√™n Replit
    bot.run(BOT_TOKEN)
